/**
 * serverUrl app接口服务器地址
 */
//var serverUrl = 'http://192.168.49.204:8080/gt_app_interface/';
var CommonUtils = cu = {
	_submittedUrls : {},
	_serverUrl : 'http://127.0.0.1:8080/gt_app_interface/',
	get : function(options) {
		options.type = "GET";
		options.async = true;
		return this.ajax(options)
	},
	post : function(options) {
		options.type = "POST";
		options.async = true;
		return this.ajax(options)
	},
	post2 : function(options) {
		if (!window.FormData || !window.XMLHttpRequest) {
			cu.hint("当前浏览器不支持此特性", "warn");
			return
		}
		var formData = new FormData, xmlHttpRequest = new XMLHttpRequest;
		lu.each(options.data, function(t, n) {
			if (!n)
				return;
			if (n instanceof FileList) {
				for (var i = 0; i < n.length; i++)
					formData.append(t, n[i])
			} else {
				formData.append(t, n)
			}
		});
		xmlHttpRequest.open("post", options.url);
		xmlHttpRequest.onreadystatechange = function() {
			if (xmlHttpRequest.readyState == 4) {
				if (xmlHttpRequest.status == 200) {
					if (options.success)
						options.success.call(options.context, lu.toJson(xmlHttpRequest.responseText
								.trim()))
				} else {
					if (options.error) {
						xmlHttpRequest._error_ = {
							fn : options.error,
							context : options.context
						}
					}
//					ExceptionHandler._handleError(xmlHttpRequest)
				}
			}
		};
		if (options.onProgress) {
			xmlHttpRequest.upload.onprogress = function(e) {
				if (e.lengthComputable) {
					options.onProgress.call(options.context, Math.ceil(e.loaded / e.total
							* 100))
				}
			}
		}
		xmlHttpRequest.send(formData);
		return xmlHttpRequest
	},
	submit : function(options) {
		if (!options.url) {
			throw new Error("CommonUtils.submit：提交表单必须设定url")
		}
		var form = options.form;
		if (lu.isEmpty(form)) {
			throw new Error("CommonUtils.submit：没有表单对象");
			return
		}
		/*if (options.ignoreValid !== true) {
			var firstErrorObj = cu.validForm(form);
			if (firstErrorObj) {
				try {
					firstErrorObj.focus()
				} catch (e) {
				}
				var hintTarget = form.height() < $(window).height() ? form
						: null;
				cu.hint(options.validText || "表单验证不通过", "warn", hintTarget);
				return
			}
		}*/
		if (lu.isFn(options.before)) {
			if (options.before.call(options.context, form) === false)
				return
		}
		var data = form.serialize();
		if (options.data) {
			data += "&" + $.param(options.data, true)
		}
		options.data = data;
		options.form = form;
		if (!options.type)
			options.type = "POST";
		if (this._submittedUrls[options.url]) {
			log("重复提交表单：" + options.url);
			return
		}
		this._submittedUrls[options.url] = true;
		lu.timeout(function() {
			delete this._submittedUrls[options.url]
		}, 500, this);
		return this.ajax(options)
	},
	ajax : function(options) {
		if (!options || !options.url) {
			throw new Error("发送ajax请求之前请先设置url。")
		}
		if (lu.isEmpty(options.cache))
			options.cache = false;
		if (lu.isNotEmpty(au.getTokenInfo())){
			if(lu.isEmpty(options.data)){
				lu.applyIf(options, {
					data: {token : au.getTokenInfo()}
				});
			}else{
				if(lu.isStr(options.data)){
					options.data = options.data + "&token=" +au.getTokenInfo(); 
				}else{
					lu.applyIf(options.data, {token : au.getTokenInfo()});
				}
			}
		}
		return mui.ajax(cu._serverUrl + options.url, options);
	},
	sync : function(options) {
		if (lu.isStr(options)) {
			options = {
				url : options
			}
		}
		var result = null;
		options.async = false;
		options.success = function(data) {
			result = data
		};
		if (lu.isEmpty(options.cache))
			options.cache = false;
		this.ajax(options);
		return result
	},
	getServerUrl : function(){
		return this._serverUrl;
	}
};
var log = function(obj) {
	if (typeof console === "undefined") {
		alert(obj)
	} else {
		console.log(obj)
	}
};
