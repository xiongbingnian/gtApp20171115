var LangUtils = lu = {
	toJson : function(jsonStr) {
		try {
			return $.parseJSON(jsonStr.trim())
		} catch (e) {
			return jsonStr
		}
	},
	escapeHtml : function(text) {
		if (!text)
			return text;
		return (text + "").replace(/&/g, "&amp;").replace(/</g, "&lt;")
				.replace(/>/g, "&gt;")
	},
	clearHtml : function(html) {
		if (!html)
			return html;
		return html.replace(/&[a-zA-Z]{1,10};/g, "").replace(/<[^>]*/g, "")
	},
	emptyStr : function(t) {
		return t === null || t === undefined ? "" : t
	},
	formatStr : function() {
		var t = arguments, e = "" + lu.emptyStr(t[0]);
		return e.replace(/\{(\d+)\}/g, function(e, r) {
			return lu.emptyStr(t[lu.int(r) + 1])
		})
	},
	trim : function(text) {
		return lu.isStr(text) ? text.trim() : text
	},
	each : function(obj, callback, context) {
		if (!obj || !callback)
			return;
		if (lu.isArray(obj)) {
			for (var i = 0; i < obj.length; i++) {
				var v = callback.call(context || obj[i], i, obj[i]);
				if (v === false)
					return
			}
		} else if (lu.isJqObj(obj)) {
			obj.each(function(i, n) {
				callback.call(context || this, i, n)
			})
		} else {
			for ( var i in obj) {
				var v = callback.call(context || obj[i], i, obj[i]);
				if (v === false)
					return
			}
		}
	},
	apply : function(dest, src) {
		if (!dest)
			return;
		this.each(src, function(i, n) {
			if (n !== undefined)
				dest[i] = n
		});
		return dest
	},
	applyIf : function(dest, src) {
		if (!dest)
			return;
		this.each(src, function(i, n) {
			if (lu.isUndefined(dest[i]))
				dest[i] = n
		});
		return dest
	},
	extend : function(child, parent, overrides) {
		if (typeof parent === "object") {
			overrides = parent;
			parent = child;
			child = function() {
				parent.apply(this, arguments)
			}
		}
		$.extend(child.prototype, parent.prototype, overrides);
		return child
	},
	clone : function(obj) {
		if (obj == null)
			return null;
		var newObj = {};
		this.apply(newObj, obj);
		return newObj
	},
	equals : function(obj1, obj2) {
		if (typeof obj1 !== typeof obj2)
			return false;
		if (obj1 == obj2)
			return true;
		var result = true, pCount = 0;
		lu.each(obj1, function(p, v) {
			pCount++;
			if (lu.isObj(v))
				result = lu.equals(v, obj2[p]);
			else
				result = v === obj2[p];
			if (!result)
				return false
		});
		if (result) {
			lu.each(obj2, function() {
				pCount--
			});
			result = pCount == 0
		}
		return result
	},
	notEquals : function(obj1, obj2) {
		return !this.equals(obj1, obj2)
	},
	pluck : function(array, propName, separator) {
		if (!array)
			return null;
		var values = [];
		var props = propName.split(".");
		$.each(array, function() {
			var v = this;
			$.each(props, function() {
				if (!v[this]) {
					v = null;
					return false
				}
				v = v[this]
			});
			values.push(v)
		});
		return separator ? values.join(separator) : values
	},
	filterArray : function(array, fn, scope) {
		if (!array || !fn)
			return array;
		var result = [];
		lu.each(array, function(i, n) {
			if (fn.call(scope || n, n))
				result.push(n)
		});
		return result
	},
	getArrayItem : function(array, key, value) {
		if (lu.isEmpty(array) || !key)
			return null;
		for (var i = 0; i < array.length; i++) {
			if (array[i][key] == value)
				return array[i]
		}
		return null
	},
	"int" : function(v, defaultValue) {
		if (/^-?[0-9]+$/.test(v)) {
			return parseInt(v, 10)
		} else {
			return lu.isUndefined(defaultValue) ? null : defaultValue
		}
	},
	"float" : function(v, defaultValue) {
		if (isNaN(v)) {
			return lu.isUndefined(defaultValue) ? null : defaultValue
		} else {
			return parseFloat(v)
		}
	},
	round : function(val, decimals) {
		if (!decimals)
			decimals = 0;
		var d = Math.pow(10, decimals);
		return Math.round(val * d) / d
	},
	formatDate : function(v) {
		return lu.formatDateTime(v, "yyyy-MM-dd")
	},
	formatDateTime : function(v, formatStr) {
		if (!v)
			return "";
		if (!lu.isDate(v)) {
			if (!lu.isNumber(v))
				v = lu.int(v + "");
			v = new Date(v)
		}
		return v.format(formatStr || "yyyy-MM-dd hh:mm:ss")
	},
	shortDateTime : function(v) {
		if (!v)
			return "";
		if (!lu.isDate(v)) {
			if (!lu.isNumber(v))
				v = lu.int(v + "");
			v = new Date(v)
		}
		return v.format(v.getYear() == (new Date).getYear() ? "M-d hh:mm"
				: "yy-M-d hh:mm")
	},
	parseDate : function(v) {
		if (!v)
			return null;
		var year = 0, month = 0, day = 0, hour = 0, min = 0, sec = 0, temp1, temp2;
		try {
			temp1 = v.split(" ");
			temp2 = temp1[0].split("-");
			year = lu.int(temp2[0]);
			if (!year || year <= 1e3 || year > 9999)
				return null;
			month = lu.int(temp2[1]);
			if (!month || month < 1 || month > 12)
				return null;
			day = lu.int(temp2[2]);
			if (!day || day < 1)
				return null;
			if (month == 2) {
				if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) {
					if (day > 29)
						return null
				} else if (day > 28)
					return null
			} else if (month < 8 && month % 2 == 1) {
				if (day > 31)
					return null
			} else if (month > 7 && month % 2 == 0) {
				if (day > 31)
					return null
			} else if (day > 30)
				return null;
			if (temp1.length > 1) {
				temp2 = temp1[1].split(":");
				hour = lu.int(temp2[0]);
				if (hour < 0 || hour > 23)
					return null;
				min = lu.int(temp2[1]);
				if (min < 0 || min > 59)
					return null;
				sec = temp2.length == 3 ? lu.int(temp2[2]) : 0;
				if (sec < 0 || sec > 59)
					return null
			}
			return new Date(year, month - 1, day, hour, min, sec)
		} catch (e) {
			return null
		}
	},
	today : function() {
		var now = new Date;
		return new Date(now.getFullYear(), now.getMonth(), now.getDate())
	},
	formatFileSize : function(size) {
		if (size < 1e3)
			return size + "B";
		size /= 1024;
		if (size < 1e3)
			return Math.round(size * 10) / 10 + "KB";
		size /= 1024;
		if (size < 1e3)
			return Math.round(size * 10) / 10 + "MB";
		size /= 1024;
		return Math.round(size * 100) / 100 + "GB"
	},
	formatTimePeriod : function(millis, secDecimals) {
		var d, h, m, s = Math.floor(millis / 1e3);
		if (s > 60) {
			m = Math.floor(s / 60);
			s = secDecimals ? s % 60 : (s % 60).toFixed(secDecimals)
		}
		if (m > 60) {
			h = Math.floor(m / 60);
			m = m % 60
		}
		if (h > 24) {
			d = Math.floor(h / 24);
			h = h % 24
		}
		return (d ? d + "天" : "") + (h ? h + "时" : "") + (m ? m + "分" : "")
				+ (s ? s + "秒" : "")
	},
	decode : function(value, keyValues) {
		if (value == null || keyValues == null)
			return null;
		var kvs = keyValues.split(",");
		var i = 0;
		while (i < kvs.length - 1) {
			if (value.toString() == kvs[i]) {
				return kvs[i + 1]
			}
			i = i + 2
		}
		if (i == kvs.length - 1) {
			return kvs[i]
		}
		return null
	},
	ready : function(parent, target, fn, context) {
		if (parent == null)
			return;
		var checkFn = null, targetValue;
		if (lu.isFn(parent)) {
			checkFn = parent;
			context = fn;
			fn = target
		} else {
			checkFn = function() {
				targetValue = lu.isFn(parent[target]) ? parent[target]
						.call(parent) : parent[target];
				return targetValue !== null && targetValue !== undefined
			}
		}
		if (checkFn.call(context)) {
			fn.call(context, targetValue);
			return
		}
		var limit = 60 * 1e3, start = (new Date).getTime();
		var handler = lu.interval(function() {
			if ((new Date).getTime() - start > limit) {
				clearInterval(handler);
				throw new Error("lu.ready()超时: parent={0}".format(parent))
			}
			if (checkFn.call(context)) {
				fn.call(context, targetValue);
				clearInterval(handler)
			}
		}, 30, context)
	},
	timeout : function(fn, ms, context) {
		if (!fn)
			return;
		return setTimeout(function() {
			fn.call(context)
		}, ms)
	},
	interval : function(fn, ms, context) {
		if (!fn)
			return;
		return setInterval(function() {
			fn.call(context)
		}, ms)
	},
	urlParam : function(obj) {
		if (!obj)
			return "";
		if (!lu.isObj(obj))
			return "";
		var params = [];
		lu.each(obj, function(p, v) {
			params.push(p + "=" + encodeURI(v))
		});
		return params.join("&")
	},
	isEmail : function(str) {
		if (str == null)
			return false;
		return /^(?:[a-zA-Z0-9]+[_\-\+\.]?)*[a-zA-Z0-9]+@(?:([a-zA-Z0-9]+[_\-]?)*[a-zA-Z0-9]+\.)+([a-zA-Z]{2,})+$/
				.test(str)
	},
	isIllegalChars : function(str) {
		if (str == null)
			return false;
		if (str.indexOf("%") >= 0 || str.indexOf("_") >= 0) {
			return true
		}
		return false
	},
	isMobPhone : function(str) {
		if (str == null)
			return false;
		return /^1[3|4|5|7|8][0-9]\d{8}$/.test(str)
	},
	isEmpty : function(v) {
		if (v === null || v === undefined)
			return true;
		if (v == null || v == ''){
			return true;
		}
		if (lu.isStr(v)) {
			return lu.trim(v) === ""
		} else if (lu.isArray(v)) {
			return v.length === 0
		} else if (lu.isJqObj(v)) {
			return v.length === 0
		} else if (lu.isObj(v)) {
			for ( var e in v) {
				return false
			}
			return true
		} 
		return false
	},
	isNotEmpty : function(v) {
		return !this.isEmpty(v)
	},
	isFn : function(v) {
		return typeof v === "function"
	},
	isObj : function(v) {
		return typeof v === "object"
	},
	isStr : function(v) {
		return typeof v === "string"
	},
	isNumber : function(v) {
		return typeof v === "number"
	},
	isArray : function(v) {
		return Object.prototype.toString.apply(v) === "[object Array]"
	},
	isUndefined : function(v) {
		return typeof v === "undefined"
	},
	isUndef : function(v) {
		return typeof v === "undefined"
	},
	isDef : function(v) {
		return !this.isUndef(v)
	},
	isDate : function(v) {
		return v instanceof Date
	},
	isJqObj : function(v) {
		return v instanceof jQuery
	},
	isDomObj : function(v) {
		return typeof HTMLElement === "object"
				|| typeof HTMLElement === "function" ? v instanceof HTMLElement
				: v && typeof v === "object" && v.nodeType === 1
						&& typeof v.nodeName === "string"
	},
	emptyFn : function() {
	},
	keyCode : {
		BACKSPACE : 8,
		ENTER : 13,
		ESCAPE : 27,
		LEFT : 37,
		UP : 38,
		RIGHT : 39,
		DOWN : 40,
		DELETE : 46
	}
};
String.prototype.format = function() {
	var args = arguments;
	return this.replace(/\{(\d+)\}/g, function(m, i) {
		return args[i]
	})
};
String.prototype.trim = function() {
	return $.trim(this)
};
Array.prototype.indexOf = function(o, from) {
	var len = this.length;
	from = from || 0;
	from += from < 0 ? len : 0;
	for (; from < len; ++from) {
		if (this[from] === o) {
			return from
		}
	}
	return -1
};
Array.prototype.find = function(key, value) {
	if (!key)
		return null;
	for (var i = 0; i < this.length; i++) {
		if (this[i][key] == value)
			return this[i]
	}
	return null
};
Array.prototype.remove = function(o) {
	var index = this.indexOf(o);
	if (index != -1) {
		this.splice(index, 1)
	}
	return this
};
Array.prototype.last = function() {
	if (this.length == 0)
		return null;
	return this[this.length - 1]
};
Array.prototype.unique = function() {
	var indsToDel = [];
	for (var i = 0; i < this.length; i++) {
		for (var j = i + 1; j < this.length; j++) {
			if (this[i] === this[j]) {
				indsToDel.push(i);
				break
			}
		}
	}
	for (var i = 0; i < indsToDel.length; i++) {
		this.splice(indsToDel[i], 1)
	}
	return this
};
if (!Array.prototype.forEach) {
	Array.prototype.forEach = function(callback) {
		for (var i = 0; i < this.length; i++) {
			var v = callback.call(this[i], this[i], i);
			if (v === false)
				return
		}
	}
}
Date.prototype.format = function(formatStr) {
	if (!formatStr)
		return null;
	var str = formatStr;
	var week = [ "日", "一", "二", "三", "四", "五", "六" ];
	str = str.replace(/yyyy/, this.getFullYear());
	str = str.replace(/yy/, this.getYear() % 100 > 9 ? (this.getYear() % 100)
			.toString() : "0" + this.getYear() % 100);
	str = str.replace(/MM/, this.getMonth() >= 9 ? (this.getMonth() + 1)
			.toString() : "0" + (this.getMonth() + 1));
	str = str.replace(/M/g, this.getMonth() + 1);
	str = str.replace(/w/g, week[this.getDay()]);
	str = str.replace(/dd/, this.getDate() > 9 ? this.getDate().toString()
			: "0" + this.getDate());
	str = str.replace(/d/g, this.getDate());
	str = str.replace(/hh/, this.getHours() > 9 ? this.getHours().toString()
			: "0" + this.getHours());
	str = str.replace(/h/g, this.getHours());
	str = str.replace(/mm/, this.getMinutes() > 9 ? this.getMinutes()
			.toString() : "0" + this.getMinutes());
	str = str.replace(/m/g, this.getMinutes());
	str = str.replace(/ss/, this.getSeconds() > 9 ? this.getSeconds()
			.toString() : "0" + this.getSeconds());
	str = str.replace(/s/g, this.getSeconds());
	return str
};